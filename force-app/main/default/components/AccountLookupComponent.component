<apex:component controller="AccountLookupComponentController">
    <apex:attribute name="id" type="string" assignto="{!componentId}"
        description="The id to identify the controls in this component"
        required="true" />
    <apex:attribute name="assignTo" type="string"
        assignto="{!assignToElement}"
        description="The id of the element to set the select account number to"
        required="true" />
    <apex:attribute name="onselect" type="string"
        assignto="{!onSelectFunctionCallback}"
        description="The function to call upon selection" required="false" />
    <apex:attribute name="displayAccountNumber" type="boolean"
        description="search by number" required="false" />

	<c:ScriptLoader jsLibraries="jquery,jqueryui"
					cssLibraries="jqueryui" />

    <style>
.ui-autocomplete-accountType {
    font-weight: bold;
    padding: .2em .4em;
    margin: .8em 0 .2em;
    line-height: 1.5;
}
</style>

    <script>
        var j$ = jQuery.noConflict();
        
        function {!componentId}_enable(enabled) {
            var enabledString = "disable";
            if(enabled) {
                enabledString = "enable";
            } 
            
            var elementToBindTo = j$('[class^="{!assignToElement}"]');
            if(elementToBindTo.length <= 0) {
                elementToBindTo = j$('[id$="{!assignToElement}"]');
            }
            
            window.console&&console.log('George says: setting autocomplete to: ' + enabled);
            
            elementToBindTo.groupedAutoomplete_{!componentId}(enabledString);
        }
        
        function htmlDecode(value){
          return j$('<div/>').html(value).text();
        }

        j$.widget("custom.groupedAutoomplete_{!componentId}", j$.ui.autocomplete, {
            _renderMenu : function(ul, items) {
                var that = this, currentAccountType = "";
                j$.each(items, function(index, item) {
                    if (item.accountType != currentAccountType) {
                        ul.append("<li class='ui-autocomplete-accountType'>"
                                + item.accountType + "</li>");
                        currentAccountType = item.accountType;
                    }
                    item.label = htmlDecode(item.label);
                    item.value = htmlDecode(item.value );
                    that._renderItemData(ul, item);
                });
            }
        });
        
        function {!componentId}_onselect(value) {
            var functionName = "{!onSelectFunctionCallback}";
            if(functionName.trim() != "")
                {!onSelectFunctionCallback}(value);
        }

        var cache_{!componentId} = {};
        
        j$(function() {
            var elementToBindTo = j$('[class^="{!assignToElement}"]');
            if(elementToBindTo.length <= 0) {
                elementToBindTo = j$('[id$="{!assignToElement}"]');
            }
                        
            elementToBindTo.groupedAutoomplete_{!componentId}(
                            {
                                minLength : 2,
                                delay : 0,
                                select : function(event, ui) {
                                    if(ui.item && ui.item.value) {
                                        j$("#hf{!componentId}_AccountId").val(
                                                ui.item.accountId);
                                        
                                        if({!displayAccountNumber}) {
                                            {!componentId}_onselect(htmlDecode(ui.item.accountName));
                                        }else {
                                            {!componentId}_onselect(ui.item.accountNumber);
                                        }                                        
                                    }
                                },
                                source : function(request, response) {
                                    j$("#hf{!componentId}_AccountId").val("");
                                
                                    var term = request.term;
                                    if (term in cache_{!componentId}) {
                                        window.console&&console.log('George says: returning from cache....');
                                        response(cache_{!componentId}[term]);
                                    } else {
                                        AccountLookupComponentController.getData(
                                            request.term, {!displayAccountNumber}, function(result,
                                                    event) {
                                                if (event.status) {
                                                    cache_{!componentId}[term] = result;
                                                    window.console&&console.log('George says: new result - ' + result);
                                                    response(result);
                                                } else {
                                                    alert(event.message);
                                                    return;
                                                }
                                            });
                                    }
                                }                               
                            });
        });
    </script>
    <input type="hidden" id="hf{!componentId}_AccountId" />
</apex:component>