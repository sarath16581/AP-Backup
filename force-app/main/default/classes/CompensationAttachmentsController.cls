/**
 *
 *     @author Hasantha Liyanage
 *     @date 2023-07-17
 *     @group lwc
 *     @tag apex controller
 *     @tag Attachments
 *     @domain ui
 *     @description support listing attachments and selecting them for the compensation record
 *     @changelog
 *     2023-07-17 - hasantha.liyanage@auspost.com.au - Created
 *
 */
public with sharing class CompensationAttachmentsController {

    public static final Boolean isCompensationUser {
        get {
            if(isCompensationUser == null) {
                isCompensationUser = FeatureManagement.checkPermission('Is_Compensation_User');
            }
            return isCompensationUser;
        }
        private set;
    }
    public static final Boolean IsCompensationSupervisor {
        get {
            if(isCompensationSupervisor == null) {
                isCompensationSupervisor = FeatureManagement.checkPermission('Is_Compensation_Supervisor');
            }
            return isCompensationSupervisor;
        }
        private set;
    }

    /**
     * pass the common configurations for the componsnt
     * @return PageConfig
     */
    @AuraEnabled
    public static PageConfig getPageConfig() {
        PageConfig config = new PageConfig();
        if (isCompensationUser || isCompensationSupervisor) {
            config.isAllowedToCreateCompensation = true;
        } else {
            config.isAllowedToCreateCompensation = false;
        }
        return config;
    }

    /**
     *  Prepare and return the AttachmentDetail wrapper after retrieving and comparing Attachments and Files linked to the case
     *  and the compensation record, any existing files/attachments linked to the compensations should not be allowed to de-select from the table
     * @param recordId compensation record ID
     *
     * @return List<AttachmentDetail>
     */
    @AuraEnabled
    public static List<AttachmentDetail> getAttachmentsByParentId(Id recordId) {
        List<AttachmentDetail> attachmentDetails = new List<AttachmentDetail>();
        Compensation__c compensation = CompensationSelector.newInstance(1).getById(recordId, new Set<Object>())[0];
        if (compensation == null || compensation.Case__c == null) {
            return new List<AttachmentDetail>();
        }

        // get attachment details
        getAttachmentDetails(compensation, attachmentDetails);
        // get file details
        getFileAttachmentDetails(compensation, attachmentDetails);

        return attachmentDetails;
    }
    /**
     * Get file details
     * @param compensation
     * @param attachmentDetails
     */
    @TestVisible
    private static void getFileAttachmentDetails(Compensation__c compensation, List<AttachmentDetail> attachmentDetails) {
        // get files related to related case
        List<ContentDocumentLink> caseContentDocumentLinks = getContentDocumentLinksWithDocuments(compensation.Case__c);
        // get files related to compensation
        List<ContentDocumentLink> compensationContentDocumentLinks = getContentDocumentLinksWithDocuments(compensation.Id);

        // compare files and prepare the attachment details
        for (ContentDocumentLink contentDocumentLink : caseContentDocumentLinks) {
            AttachmentDetail detail = new AttachmentDetail();
            detail.BodyLength = contentDocumentLink.ContentDocument.ContentSize;
            detail.ContentType = contentDocumentLink.ContentDocument.FileType;
            detail.CreatedDate = contentDocumentLink.ContentDocument.CreatedDate;
            detail.Id = contentDocumentLink.ContentDocumentId;
            detail.Name = contentDocumentLink.ContentDocument.Title;
            detail.ParentId = contentDocumentLink.LinkedEntityId;
            detail.isAttachment = false;
            for (ContentDocumentLink compensationContentDocumentLink : compensationContentDocumentLinks) {
                if (contentDocumentLink.ContentDocument.Id == compensationContentDocumentLink.ContentDocument.Id) {
                    detail.isSelected = true;
                }
            }
            attachmentDetails.add(detail);
        }
    }

    /**
     * Get content documents with content documents per passed Id
     * @param entityId
     *
     * @return
     */
    private static List<ContentDocumentLink> getContentDocumentLinksWithDocuments(Id entityId) {
        Map<Id, ContentDocumentLink> caseContentDocumentLinks = ContentDocumentLinksSelector.newInstance().search(
                new Map<String, Object>{
                        'entityIds' => entityId
                },
                new Set<Object>{
                        ContentDocumentLinksSelector.Options.WITH_CONTENTDOCUMENT
                },
                true);
        return caseContentDocumentLinks != null ? caseContentDocumentLinks.values() : new List<ContentDocumentLink>();
    }

    /**
     * Get Attachments related to passed Id
     * @param recordId
     *
     * @return
     */
    private static List<Attachment> getAttachments(Id recordId) {
        Map<Id, Attachment> caseAttachments = AttachmentsSelector.newInstance().selectByParentId(new Set<Id>{
                recordId
        });
        return caseAttachments != null ? caseAttachments.values() : new List<Attachment>();
    }

    /**
     * get attachment details
     * @param compensation current compensation record
     * @param attachmentDetails to storeattachment details
     */
    @TestVisible
    private static void getAttachmentDetails(Compensation__c compensation, List<AttachmentDetail> attachmentDetails) {
        // get attachments related to related case
        List<Attachment> caseAttachments = getAttachments(compensation.Case__c);
        // get attachments related to compensation, this will allow us to find any existing attachments
        List<Attachment> compensationAttachments = getAttachments(compensation.Id);

        // compare attachments and prepare the attachment details
        for (Attachment caseAttachment : caseAttachments) {
            AttachmentDetail detail = new AttachmentDetail();
            detail.BodyLength = caseAttachment.BodyLength;
            detail.ContentType = caseAttachment.ContentType;
            detail.CreatedDate = caseAttachment.CreatedDate;
            detail.Id = caseAttachment.Id;
            detail.Name = caseAttachment.Name;
            detail.ParentId = caseAttachment.ParentId;
            detail.isAttachment = true;
            for (Attachment compensationAttachment : compensationAttachments) {
                if (caseAttachment.Name == compensationAttachment.Name) {
                    detail.isSelected = true;
                }
            }
            attachmentDetails.add(detail);
        }
    }

    /**
     * Create/link selected attachments/files against the compensation record
     */
    @AuraEnabled
    public static void createAttachments(List<AttachmentDetail> attachmentDetails, Id recordId) {

        Set<Id> attachmentIds = new Set<Id>();
        Compensation__c compensation;
        List<ContentDocumentLink> contentLinks = new List<ContentDocumentLink>();
        // read the attachment details passed and deviate between attachments and files
        for (AttachmentDetail detail : attachmentDetails) {
            if(detail.isSelectedNew) {
                // if the selected file is an attachment
                if (detail.isAttachment) {
                    attachmentIds.add(detail.Id);
                } else {
                    // otherwise salesforce files
                    ContentDocumentLink contentDocumentLink = new ContentDocumentLink();
                    contentDocumentLink.LinkedEntityId = recordId;
                    contentDocumentLink.ContentDocumentId = detail.Id;
                    contentDocumentLink.shareType = 'V';
                    contentLinks.add(contentDocumentLink);
                }

                // if the first time selection and no existing attachments, then update the POV checkbox
                if(!detail.isSelected) {
                    compensation = new Compensation__c (Id = recordId, Proof_of_Value__c = true);
                }
            }

        }

        // link the files found to the compensation
        if(!contentLinks.isEmpty()) {
            ApplicationDatabase.getInstance().dmlInsert(contentLinks);
        }

        // restive attachments to create duplicate attachments
        Map<Id, Attachment> attachmentsToDuplicate = AttachmentsSelector.newInstance().selectById(attachmentIds, new Set<Object>{AttachmentsSelector.Options.WITH_BODY});
        List<Attachment> duplicateAttachments = new List<Attachment>();

        if(attachmentsToDuplicate != null) {
            // prepare clones
            for (Attachment attachment : attachmentsToDuplicate.values()) {
                Attachment newAttachment = attachment.clone(false);
                newAttachment.ParentId = recordId;
                duplicateAttachments.add(newAttachment);
            }
        }

        // create new attachments against compensation record
        if(!duplicateAttachments.isEmpty()) {
            ApplicationDatabase.getInstance().dmlInsert(duplicateAttachments);
        }

        // update the POV checkbox if there is at least one of attachment OR file is selected
        if(compensation != null) {
            ApplicationDatabase.getInstance().dmlUpdate(new List<Compensation__c> {compensation});
        }
    }

    /**
     *  Wrapper class to store attachment/file data to pass between apex class and the lwc component
     */
    public class AttachmentDetail {
        @AuraEnabled public Boolean isSelected {
            get {
                if (isSelected == null) {
                    return false;
                }
                return isSelected;
            }
            set;
        }
        @AuraEnabled public Boolean isSelectedNew {
            get {
                if (isSelectedNew == null) {
                    return false;
                }
                return isSelectedNew;
            }
            set;
        }
        @AuraEnabled public Boolean isAttachment {get;set;}
        @AuraEnabled public Integer bodyLength {get;set;}
        @AuraEnabled public String contentType {get;set;}
        @AuraEnabled public Datetime createdDate {get;set;}
        @AuraEnabled public String id {get;set;}
        @AuraEnabled public String name {get;set;}
        @AuraEnabled public String parentId {get;set;}
    }

    /**
     * any configurations needs to pass to the front end
     */
    public class PageConfig {
        @AuraEnabled public Boolean isAllowedToCreateCompensation {get;set;}
    }
}
