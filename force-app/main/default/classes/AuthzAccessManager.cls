/**
 * @author alexvolkov
 * @date 25/5/21
 * @description Class to manage API access tokens generated by AuthZ IDP
 */

/**
--------------------------------------- History --------------------------------------------------
25.05.2021    alex.volkov@auspost.com.au    Initial creation
**/

public with sharing class AuthzAccessManager
{
	/**
 	* @description Custom exception thrown in case of token generation failure
	 */
	public class AccessException extends Exception {}
	/**
 	* @description Run mode: STANDARD - try to find a cached token and generate and cache one if not found
 	* 						 SKIP_CACHE - ignore cache entirely
 	* 						 FORCE_GENERATE - generate and cache a token
	 */
	public enum RunMode {STANDARD, SKIP_CACHE, FORCE_GENERATE}

	private static AccessToken AUTHZ_ACCESS_TOKEN;

	/**
 	* @description Singleton returning an access token needed by API calls
 	* @param pMode Run mode
 	* @return AccessToken
 	*/
	public static AccessToken getAccessToken(RunMode pMode)
	{
		if (AUTHZ_ACCESS_TOKEN == null || pMode == RunMode.FORCE_GENERATE)
		{
			if (pMode == RunMode.STANDARD)
			{
				AUTHZ_ACCESS_TOKEN = (AccessToken)CacheManager.get('AUTHZ_ACCESS_TOKEN');
			}
			if (AUTHZ_ACCESS_TOKEN == null || pMode == RunMode.FORCE_GENERATE)
			{
				Http vHTTP = new Http();
				HttpRequest vReq = new HttpRequest();
				vReq.setEndpoint('callout:AuthZ');
				vReq.setMethod('POST');
				vReq.setHeader('Content-Type', 'application/x-www-form-urlencoded');
				String vRequestBody = 'grant_type=client_credentials'
						+ '&client_id={!HTMLENCODE($Credential.Username)}'
						+ '&client_secret={!HTMLENCODE($Credential.Password)}';
				vReq.setBody(vRequestBody);
				HttpResponse vRes = vHTTP.send(vReq);
				if (vRes.getStatusCode() != 200)
				{
					throw new AccessException('Failed to obtain an access token - callout failed');
				}
				AUTHZ_ACCESS_TOKEN = (AccessToken)JSON.deserialize(vRes.getBody(), AccessToken.class);
				if (pMode != RunMode.SKIP_CACHE && AUTHZ_ACCESS_TOKEN != null)
				{
					CacheManager.put('AUTHZ_ACCESS_TOKEN', '', AUTHZ_ACCESS_TOKEN, AUTHZ_ACCESS_TOKEN.expires_in);
				}
			}
		}
		return AUTHZ_ACCESS_TOKEN;
	}

	public class AccessToken
	{
		public String access_token;
		public String token_type;
		public Integer expires_in;
	}
}