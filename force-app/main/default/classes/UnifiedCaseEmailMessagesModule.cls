/**
 * @description Module to handle automation specific to Unified cases on email messages(email to case).
 * @author Ranjeewa Silva
 * @date 2024-08-05
 * @test
 * @changelog
 */
public inherited sharing class UnifiedCaseEmailMessagesModule extends ApplicationModule {

	// reassignment reason when cases are reassigned due to customer emails
	private static final String REASSIGNMENT_REASON = 'Review customerâ€™s email';

	@TestVisible private Set<Id> unifiedCaseRecordTypeIds {
		get {
			if (unifiedCaseRecordTypeIds == null) {
				unifiedCaseRecordTypeIds = RecordTypesSelector.newInstance().selectByDeveloperNameLike('Case', 'Unified').keySet();
			}
			return unifiedCaseRecordTypeIds;
		}
		set;
	}

	// setup which triggers this module should respond to
	public UnifiedCaseEmailMessagesModule() {
		getTriggerEvents().enableAfterInsert();
	}

	public override void onAfterInsert(List<SObject> records, ApplicationUnitOfWork uow) {
		try {
			Set<Id> parentCaseIds = new Set<Id>();
			for (EmailMessage emailMessage : (List<EmailMessage>) records) {
				// check if this email message is an incoming email message and it is not an auto generated email such as
				// out of office reply email.
				if (emailMessage.Incoming && !EmailMessageUtil.isAutoGeneratedEmailMessage(emailMessage)) {
					parentCaseIds.add(emailMessage.ParentId);
				}
			}

			if (!parentCaseIds.isEmpty()) {
				// we have incoming email messages that are not auto generated,
				// need to apply record type filter on parent cases to select only unified cases to perform case automation.
				List<Case> unifiedCases = CasesSelector.newInstance(new Set<SObjectField>{
						Case.Id, Case.OwnerId, Case.IsClosed
				}).search(new Map<String, Object>{
						'caseIds' => parentCaseIds,
						'recordTypeIds' => unifiedCaseRecordTypeIds
				}, new Set<Object>{CasesSelector.Options.WITH_CONTACT_REQUESTS}, true);

				List<CaseUnifiedAutomationService.RecordWrapper> caseReassignmentParams = new List<CaseUnifiedAutomationService.RecordWrapper>();

				for (Case caseRecord: unifiedCases) {
					CaseUnifiedAutomationService.RecordWrapper reassignmentParam = new CaseUnifiedAutomationService.RecordWrapper();
					reassignmentParam.caseRecord = caseRecord;
					reassignmentParam.newReassignmentReason = REASSIGNMENT_REASON;
					reassignmentParam.srcObjectType = EmailMessage.SObjectType;
					caseReassignmentParams.add(reassignmentParam);
				}

				if (!caseReassignmentParams.isEmpty()) {
					CaseUnifiedAutomationService.getInstance().processForCaseReassignment(caseReassignmentParams, CaseUnifiedAutomationService.InvocationPoint.EMAILAUTO, uow);
				}
			}
		} catch (Exception e) {
			// log error in ExceptionLog__c object for analysis
			ApplicationLogger.getInstance().logException(ApplicationLogger.wrapException(e), 'Unified Customer Service', UnifiedCaseEmailMessagesModule.class.getName(), 'onAfterInsert', 'EmailMessage', ApplicationLogger.LoggingLevel.ERROR);
		}
	}
}