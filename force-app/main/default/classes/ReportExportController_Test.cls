/***************************************************************************************
Description: Test class to cover ReportExportController functionality
History:
--------------------------------------------------
2014-06-24  di.chen@bluewolf.com  Created
2018-06-06  TDO-27 rahul.kapoor@coroma.com.au Refactored comments and indentation,
            added tests for report format as xls and csv, setting show details to yes
            and test for invalid report id. SeeAllData=true is used to SOQL Reports
****************************************************************************************/
@isTest(seealldata = true)
private class ReportExportController_Test {

    /****************************************************************************************************
    *  Scenario:
    *      Retrieve of data generated by any report with Printable format for further processing in Apex
    *      or attaching to emails.
    *****************************************************************************************************/

    @isTest
    static void retrieveDataWithPrintableFormat() {

        Test.startTest();

            ReportExportController re = new ReportExportController();
            //Setting prettify to true.
            re.prettify = true;
            ReportExportController.mockOutput = 'test output';
            //Setting report id.
            re.reportId = [SELECT Id FROM Report LIMIT 1].Id;

            re.getOutput();
            re.getRequestUrl();
            //Setting format as printable.
            re.format = 'printable';
            re.getRequestUrl();
            //Setting report id to null.
            re.reportId = null;
            try{
                re.getRequestUrl();
            }catch(Exception e){}

        Test.stopTest();
        system.assertNotEquals(null,re.getOutput(),
                'ReportExportController_Test_retrieveDataWithPrintableFormat : Report output is not null');
    }

    /****************************************************************************************************
    *  Scenario:
    *      Retrieve of data generated by any report with xls format for further processing in Apex
    *      or attaching to emails.
    *****************************************************************************************************/
    @isTest
    static void retrieveDataWithXlsFormat() {

        Test.startTest();

            ReportExportController re = new ReportExportController();
            //Setting prettify to true.
            re.prettify = true;
            ReportExportController.mockOutput = 'test output';
            //Setting report id.
            re.reportId = [SELECT Id FROM Report LIMIT 1].Id;

            re.getOutput();
            re.getRequestUrl();
            //Setting format as xls.
            re.format = 'xls';
            re.getRequestUrl();

            try{
                re.getRequestUrl();
            }catch(Exception e){}

        Test.stopTest();
        system.assertNotEquals(null,re.getOutput(),
                'ReportExportController_Test_retrieveDataWithPrintableFormat : Report output is not null');
    }

    /****************************************************************************************************
    *  Scenario:
    *      Retrieve of data generated by any report with Csv format for further processing in Apex
    *      or attaching to emails.
    *****************************************************************************************************/
    @isTest
    static void retrieveDataWithCsvFormat() {

        Test.startTest();

            ReportExportController re = new ReportExportController();
            //Setting prettify to true.
            re.prettify = true;
            //Creating and setting csv file.
            String csvFile = 'type,subject,Reason\n';
            csvFile += 'Fax,s1,r1\n\n\n';
            csvFile += 'Fax1,s2,r2\n';
            csvFile += 'Fax2,s3,r3\n';
            ReportExportController.mockOutput = csvFile;
            //Setting report id.
            re.reportId = [SELECT Id FROM Report LIMIT 1].Id;

            re.getOutput();
            re.getRequestUrl();
            //Setting format as csv.
            re.format = 'csv';
            re.getRequestUrl();

            try{
                re.getRequestUrl();
            }catch(Exception e){}

        Test.stopTest();

        system.assertNotEquals(null,re.getOutput(),
                'ReportExportController_Test_retrieveDataWithCsvFormat : Report output is not null');
    }

    /****************************************************************************************************
    *  Scenario:
    *      Setting showdetails to yes for retrieve data generated by any report.
    *****************************************************************************************************/
    @isTest
    static void retrieveDataWithShowDetailsYes() {

        Test.startTest();

            ReportExportController re = new ReportExportController();
            //Setting prettify to true.
            re.prettify = true;
            ReportExportController.mockOutput = 'test output';
            //Setting report id.
            re.reportId = [SELECT Id FROM Report LIMIT 1].Id;

            re.getOutput();
            re.getRequestUrl();
            //Setting format as csv.
            re.format = 'csv';
            //Setting showDetails as yes.
            re.showDetails = 'yes';
            re.getRequestUrl();

            try{
                re.getRequestUrl();
            }catch(Exception e){}

        Test.stopTest();

        system.assertNotEquals(null,re.getOutput(),
                'ReportExportController_Test_retrieveDataWithShowDetailsYes : Report output is not null');
    }

    /****************************************************************************************************
    *  Scenario:
    *      Setting invalid report id to handle Suspicious reportId.
    *****************************************************************************************************/
    @isTest
    static void retrieveDataWithInvalidReportId() {

        Test.startTest();

            ReportExportController re = new ReportExportController();
            //Setting prettify to true.
            re.prettify = true;
            ReportExportController.mockOutput = 'test output';
            //Setting report id.
            re.reportId = [SELECT Id FROM Report LIMIT 1].Id;

            re.getOutput();
            re.getRequestUrl();
            //Setting format as printable.
            re.format = 'printable';
            re.getRequestUrl();
            //Setting invalid report id
            re.reportId = '11O90000009BSaMEAW';
            try{
                re.getRequestUrl();
            }catch(Exception e){}

        Test.stopTest();

        system.assertNotEquals(null,re.getOutput(),
                'ReportExportController_Test_retrieveDataWithInvalidReportId : Report output is not null');
    }
}