/**************************************************
Description: This apex class is called while generating the contract documents from the contract record
History:
2016-12-07  Mausam Padhiyar Modified 1856 | Order Help Sequence
2019-05-31 anshul.goyal@auspost.com.au Modified | 31052019 | to hide the common templates(i.e. cover page) from help page for the exempted prod types(priority prod,workforce ver and startrack prod)
**************************************************
@ModifiedBy: Meet Desai
@ModifiedOn: 6 March, 2020
@Description: Updated Merge Documents logic to refer Files/ Content Documents instead of Attachments
**************************************************/
public with sharing class APTS_MergeDocumentstoPDFController{
    
    //Neccessary for controller extension
    public final Apttus__APTS_Agreement__c APTSAgreement;
    
    //Declaration of variables
    Apttus__APTS_Agreement__c Agreement = new Apttus__APTS_Agreement__c(); //Agreement in use
    private List<ContentDocumentLink> lstFile = new List<ContentDocumentLink>(); //List of Files
    public List<DocumentWrapper> lstWrapper{get; set;} //List of files and information to be displayed in the visualforce page
    public Integer Sequence = 1; //Sequence of the files and initializating to 1
    public ID fileID {get;set;} //ID of the file the user is interacting with
    public Boolean processSubmitted {get;set;} //True if merge document is clicked
    public Boolean noFile {get;set;} //True if less than 1 file are retrieved
    public Boolean noTemplate{ get { return (noFile || noTemplate); }set; }
    
    private List<APT_R2T_Templates_Settings__c> templateCS = new list<APT_R2T_Templates_Settings__c>(); //List of custom settings record
    private List<APT_R2T_Templates_Settings__c> removeTemplateCS = new list<APT_R2T_Templates_Settings__c>(); //List of custom settings record to be removed
    private List<Apttus__APTS_Template__c> templates = new list<Apttus__APTS_Template__c>(); //List of templates
    public Integer TemplateSequence = 1; //Sequence of the templates
    public List<TemplateWrapper> lstTemplateWrapper{get;set;}  //List of templates and information to be displayed in the visualforce page
    
    //Constructor
    public APTS_MergeDocumentstoPDFController(ApexPages.StandardController stdController){
        
        List<ID> ParsedDocGenbyMerge = new List<ID>(); //List of File IDs that are generated by merging
        List<String> acceptableFormat = new List<String>{'doc', 'docx', 'pdf', 'rtf'}; //Only query files with these this prefix in their name
        lstWrapper = new list<DocumentWrapper>();
        lstTemplateWrapper = new list<TemplateWrapper>();
        processSubmitted = false;
        
        this.APTSAgreement = (Apttus__APTS_Agreement__c)stdController.getRecord();
        Id IdAgreement = Apexpages.currentPage().getParameters().get('Id');
        
        Agreement = [SELECT ID, Name, RecordType.DeveloperName, Apttus__Subtype__c, Included_Product_Lines__c, APT_Contract_Type__c, Apttus__FF_Agreement_Number__c, Apttus__Status_Category__c, Apttus__Status__c, Document_Generated_by_Merge__c, Apttus_QPComply__RelatedProposalId__r.APT_Use_Offline_Rates__c, APT_Pricing_Category__c
                    FROM Apttus__APTS_Agreement__c
                    WHERE ID = :IdAgreement 
                    LIMIT 1];

        //Query agreement to get APT_Use_Offline_Rates__c value
        Boolean hasOfflineRates = false;
        if(Agreement != null && Agreement.Apttus_QPComply__RelatedProposalId__r.APT_Use_Offline_Rates__c && String.isNotBlank(Agreement.APT_Pricing_Category__c) && Agreement.APT_Pricing_Category__c.equalsIgnoreCase(APT_Constants.OFFLINE_RATES))  {
            hasOfflineRates = true;
        }
        
        //Find the IDs of document generated by merge
        if(!String.isEmpty(Agreement.Document_Generated_by_Merge__c)) {
            //Parse the IDs from Document_Generated_by_Merge__c
            List<String> tempParsedDocGenbyMerge = Agreement.Document_Generated_by_Merge__c.split(';');
            
            for(String tempPDGbM : tempParsedDocGenbyMerge)
            {
                if(!String.isEmpty(tempPDGbM))
                    ParsedDocGenbyMerge.add(tempPDGbM);
            }
        }
        
        /* Start: Meet Desai: Updated SOQL Query to get data from ContentDocumentLink instead of Attachment */
        lstFile = [SELECT Id, ContentDocument.Id, ContentDocument.Title FROM ContentDocumentLink 
                  WHERE LinkedEntityId = :IdAgreement
                  AND ContentDocument.Id NOT IN :ParsedDocGenbyMerge
                  AND ContentDocument.FileExtension LIKE :acceptableFormat];
        /* End: Meet Desai: Updated SOQL Query to get data from ContentDocumentLink instead of Attachment */

        noTemplate = true;
        
        //If there are more than 1 file, set noFile to false
        if(lstFile.size() > 1)
            noFile = false;
        else
            noFile = true;
        
        //If there are Files associated to this Agreement, put them into the Document Wrapper
        if(lstFile.size()>0){
            for(ContentDocumentLink file : lstFile){
                
                /* Start: Meet Desai: Updated DocumentWrapper Arguments to get data from ContentDocumentLink instead of Attachment */
                if(Sequence == 1) //Do not display the up button when it's the first item
                    lstWrapper.add(new DocumentWrapper(file, file.ContentDocument, Agreement.Name, Sequence, Agreement.Apttus__FF_Agreement_Number__c, Agreement.Apttus__Status_Category__c, Agreement.Apttus__Status__c, false, true));
                else if (Sequence == lstFile.size()) //Do not display the down button when it's the last item
                    lstWrapper.add(new DocumentWrapper(file, file.ContentDocument, Agreement.Name, Sequence, Agreement.Apttus__FF_Agreement_Number__c, Agreement.Apttus__Status_Category__c, Agreement.Apttus__Status__c, true, false));
                else //Display both buttons for other items
                    lstWrapper.add(new DocumentWrapper(file, file.ContentDocument, Agreement.Name, Sequence, Agreement.Apttus__FF_Agreement_Number__c, Agreement.Apttus__Status_Category__c, Agreement.Apttus__Status__c, true, true));
                /* End: Meet Desai: Updated DocumentWrapper Arguments to get data from ContentDocumentLink instead of Attachment */    

                Sequence++;
            }
        }
        
        //Template Table
        //Query the custom setting records that have the same Record Type and Subtype
		system.debug('DDDD query before templateCS'+templateCS);
        templateCS = [SELECT Id, Name, Compare_against_IPL__c, Template_Product_Name__c, Sequence_No__c, Template_ID__c, Default_Document_Output__c, Security_Level__c, APT_Rate_Type__c
                     FROM APT_R2T_Templates_Settings__c 
                     WHERE Record_Type_API__c = :Agreement.RecordType.DeveloperName 
                           AND 
                           Subtype__c = :Agreement.Apttus__Subtype__c
                           AND
                           Contract_Type__c = :Agreement.APT_Contract_Type__c
                           AND
                           Settings_Type__c = 'Template'
                     ORDER BY Sequence_No__c];
        system.debug('DDDD query after templateCS'+templateCS);
         //Find the list of custom setting records to be removed
        for(APT_R2T_Templates_Settings__c tmpCS : templateCS) {

            //31052019- collect exempted contract custom metadata values
            Set <String> excludedProdLinesSet = new Set <String> ();
            for(R2T_Exempted_Contract_Settings__mdt rec : [SELECT MasterLabel,DeveloperName FROM R2T_Exempted_Contract_Settings__mdt]){
                excludedProdLinesSet.add(rec.MasterLabel.toLowerCase());
            }
            //31052019-check for the custom setting record where no product is defined(i.e. cover page) and add in the remove list to not show it for the exempted prods
            if(String.isBlank(tmpCS.Template_Product_Name__c) && (excludedProdLinesSet.contains(Agreement.Included_Product_Lines__c.toLowerCase()))){
                removeTemplateCS.add(tmpCS);
            }

            if(tmpCS.Compare_against_IPL__c && !String.isEmpty(Agreement.Included_Product_Lines__c) && !String.isEmpty(tmpCS.Template_Product_Name__c)) {
                if(!(Agreement.Included_Product_Lines__c.Contains(tmpCS.Template_Product_Name__c))) {
                    removeTemplateCS.add(tmpCS);
                }
            }

            //For startrack
            if(!String.isEmpty(Agreement.Included_Product_Lines__c) && Agreement.Included_Product_Lines__c.Contains(APT_Constants.PRODUCTTYPE_STARTRACK)) 
            {
                //R2T templates are not required
                //For offline and standard rate type, pricing schedule templates are different
                if((tmpCS.Template_Product_Name__c == null || string.isBlank(tmpCS.Template_Product_Name__c))
                   || (!hasOfflineRates && tmpCS.APT_Rate_Type__c == APT_Constants.RATE_TYPE_OFFLINE)
                   || (hasOfflineRates && tmpCS.APT_Rate_Type__c == APT_Constants.RATE_TYPE_STANDARD))
                {
                    removeTemplateCS.add(tmpCS);
                }
            }
			system.debug('DDDD removeTemplateCS'+removeTemplateCS);
        }
        
        //Find the indexes of the templates to be removed
        List<Integer> removeTemplateCSIndexes = new List<Integer>();
        
        for(APT_R2T_Templates_Settings__c tmpCSremove : removeTemplateCS) {
            for(Integer i = 0; i < templateCS.size(); i++) {
                if(tmpCSremove.ID == templateCS[i].ID)
                    removeTemplateCSIndexes.add(i);
            }
        }
        
        //Remove custom settings from the complete list
        for(Integer i = 0; i < removeTemplateCSIndexes.size(); i++) {
            templateCS.remove(removeTemplateCSIndexes[i] - i);
        }
		system.debug('DDDD templateCS after deletion of custom setting list'+templateCS);
        
        List<String> templatesRefList = new List<String>();
        
        for(APT_R2T_Templates_Settings__c  tem  : templateCS){
            templatesRefList.add(tem.Template_ID__c);
        }
        
        List<Apttus__APTS_Template__c> templatesList = [select id, Name, Apttus__ReferenceId__c
                                                            from Apttus__APTS_Template__c 
                                                            where Apttus__ReferenceId__c in:templatesRefList];
        //Query the templates from the remaining custom setting records
        //1856
        map<String, Apttus__APTS_Template__c> mapTemplate = new map<String, Apttus__APTS_Template__c>();
        //1856
        
        if(templatesList != null && templatesList.size() > 0 ){
            for(Apttus__APTS_Template__c tem : templatesList ) {
                templates.add(tem);
                mapTemplate.put(tem.Apttus__ReferenceId__c, tem);   //1856
            }
        }
        
        //Add the templates to the wrapper with additional information
        //1856
        Apttus__APTS_Template__c templateSO;
        for(Integer i = 0; i < templateCS.size(); i++) {
            noTemplate = false;
            templateSO = mapTemplate.get(templateCS[i].Template_ID__c);
            
            //if(templateSO != null && String.isNotBlank(templateSO.Name) && attach.Name.Contains(templateSO.Name)) {
            lstTemplateWrapper.add(new TemplateWrapper(templateSO, Agreement.ID, TemplateSequence, templateCS[i].Default_Document_Output__c, templateCS[i].Security_Level__c));
            TemplateSequence++;
            //}
        }
        //1856
    }
    
    public void MergeInitialization() {
        processSubmitted = true;
    }
    
    //Merge the selected files
    public PageReference MergeDocument() {
        
        Apttus__ComplySystemProperties__c instanceurl = Apttus__ComplySystemProperties__c.getvalues('System Properties'); //Get the Instance URL
        
        map<Integer,ID> mapdocumentids= new map<Integer,ID>(); //Map for the File IDs with Sequence as key        
        Integer wrappersequence = 1; //Recount the sequence after removing not selected files
        ID DocumentGeneratedbyMerge; //Save the ID of the file generated by merging
        
        //Parameters for merge API
        List<ID> lstDocumentIds = new List<ID>(); //List of File IDs
        String FileName = '_EMerged.pdf'; //Postfix file name for the merged document
        String SESSION_ID = userInfo.getSessionId(); // Session Id
        /* Start: Meet Desai: Updated API Version to 38 */
        String apiServerURL = instanceurl.Apttus__InstanceUrl__c +'/services/Soap/u/38.0/'+UserInfo.getOrganizationId(); //Merge Server URL
        /* End: Meet Desai: Updated API Version to 38 */

        //Loop through lstWrapper and include the selected files 
        for(DocumentWrapper wrapper : lstWrapper){
            if(wrapper.selected ){
                mapdocumentids.put(wrappersequence,wrapper.contentDoc.id);     
                wrappersequence++;
            }
        }
        
        //Throw an error if no file is selected
        if(mapdocumentids.size()==0) {
            ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR, 'No Documents Selected to merge'));
            return null;
        }
        
        //Get the list of file IDs sort by sequence
        for(integer seq = 1; seq<=mapdocumentids.size(); seq++) {
            lstDocumentIds.add(mapdocumentids.get(seq));            
        }
        
        //Call the merge API
        //DocumentGeneratedbyMerge = Apttus.MergeWebService.mergeDocsToPDF(Agreement.ID, lstDocumentIds, Agreement.Name + FileName, SESSION_ID, apiServerURL);    
        //merge doc
        Apttus.CustomClass.ActionParams objParam = new Apttus.CustomClass.ActionParams();
        objParam.SessionId = SESSION_ID;
        objParam.SessionUrl = apiServerURL;
        //objParam.ParentId = 'a4wO00000009qqiIAA';	//agreementId
        objParam.ParentId = Agreement.Id;
        //objParam.DocIds = new ID[]{'00PO0000007FEmP','00PO0000007FEmP', '00PO0000007FEmA'};
        objParam.DocIds = lstDocumentIds;
        objParam.DocFileName = Agreement.Name + FileName;
        objParam.AddFooter = false;

        /* Start: Meet Desai: Do not call Apttus Merge API in case of Test Class */
        if(!Test.isRunningTest()){
        	DocumentGeneratedbyMerge = Apttus.MergeWebService.createPDF(objParam);
            system.debug('*** DocumentGeneratedbyMerge ***'+DocumentGeneratedbyMerge);
            //merge doc
            
            //Save the ID of the file generated by merging
            if(!String.isEmpty(DocumentGeneratedbyMerge)) {
                if(String.isEmpty(Agreement.Document_Generated_by_Merge__c))
                    Agreement.Document_Generated_by_Merge__c = DocumentGeneratedbyMerge + ';';
                else
                    Agreement.Document_Generated_by_Merge__c = Agreement.Document_Generated_by_Merge__c + DocumentGeneratedbyMerge + ';';
                
                update Agreement;
            }
        }
        /* End: Meet Desai: Do not call Apttus Merge API in case of Test Class */
         
         //Return to the record page
        Pagereference pageref = new pagereference('/'+Agreement.Id);
        pageref.setredirect(true);
        return pageref;
        
    }
    
    //Return to the record page
    public PageReference Cancel() {
        Pagereference pageref = new pagereference('/'+Agreement.Id);
        pageref.setredirect(true);
        return pageref;
    }
    
    //Action to move the file up
    public void upAction() {
        
        DocumentWrapper tempWrapper; //Temporary placeholder
        
        //Find the file that needs to be moved
        for(Integer i = 0; i < lstWrapper.size(); i++) {
            if(lstWrapper[i].contentDoc.ID == fileID) {
                
                //Do not do anything if the file is the first file
                if(lstWrapper[i].Sequence == 1) { 
                    return; 
                }
                
                //Swap the selected file with the file above it
                else {
                    tempWrapper = lstWrapper[i];
                    
                    lstWrapper[i].Sequence--;
                    lstWrapper[i-1].Sequence++;
                    
                    lstWrapper[i] = lstWrapper[i-1];
                    lstWrapper[i-1] = tempWrapper;
                    
                    //Reevaluate upVisible and downVisible
                    for(Integer j = 0; j <= 1; j++) {
                        if(lstWrapper[i-j].Sequence == 1)
                            lstWrapper[i-j].upVisible = false;
                        else if(lstWrapper[i-j].Sequence == lstWrapper.size())
                            lstWrapper[i-j].downVisible = false;
                        else {
                            lstWrapper[i-j].upVisible = true;
                            lstWrapper[i-j].downVisible = true;
                        }
                    }
                    
                    return;
                }
            }
        }
    }
    
    //Action to move the file down
    public void downAction() {
        
        DocumentWrapper tempWrapper; //Temporary placeholder
        
        //Find the file that needs to be moved
        for(Integer i = 0; i < lstWrapper.size(); i++) {
            if(lstWrapper[i].contentDoc.ID == fileID) {
                
                //Do not do anything if the file is the last file
                if(lstWrapper[i].Sequence == lstWrapper.size()) {
                    return;
                }
                
                //Swap the selected file with the file below it
                else {
                    tempWrapper = lstWrapper[i];
                                        
                    lstWrapper[i].Sequence++;
                    lstWrapper[i+1].Sequence--;
                    
                    lstWrapper[i] = lstWrapper[i+1];
                    lstWrapper[i+1] = tempWrapper;
                    
                    //Reevaluate upVisible and downVisible
                    for(Integer j = 0; j <= 1; j++) {
                        if(lstWrapper[i+j].Sequence == 1)
                            lstWrapper[i+j].upVisible = false;
                        else if(lstWrapper[i+j].Sequence == lstWrapper.size())
                            lstWrapper[i+j].downVisible = false;
                        else {
                            lstWrapper[i+j].upVisible = true;
                            lstWrapper[i+j].downVisible = true;
                        }
                    }
                    
                    return;
                }
            }
        }
    }

    //Wrapper class for the Files and necessary information
    public class DocumentWrapper{
        
        /* Start: Meet Desai: Updated DocumentWrapper Arguments to get data from ContentDocumentLink instead of Attachment */
        public ContentDocumentLink contentDocLink{get;set;}
        public ContentDocument contentDoc {get;set;}
        public String AgreementName{get;set;}
        public Integer Sequence {get;set;}
        public String AgreementNumber{get;set;}
        public String Type{get;set;}
        public String Status{get;set;}   
        public boolean selected{get;set;}
        public boolean upVisible{get;set;}
        public boolean downVisible{get;set;}
        
        public DocumentWrapper(ContentDocumentLink contentDocLink, ContentDocument contentDoc, String AgreementName, Integer Sequence, String AgreementNumber, String Type, String Status, boolean upVisible, boolean downVisible){
            this.contentDoc = contentDoc;
            this.contentDocLink = contentDocLink;
            this.AgreementName = AgreementName;
            this.Sequence = Sequence;
            this.AgreementNumber = AgreementNumber;
            this.Type = Type;
            this.Status = Status;
            this.upVisible = upVisible;
            this.downVisible = downVisible;
            
            this.selected = true; //Default to true
        }
        /* End: Meet Desai: Updated DocumentWrapper Arguments to get data from ContentDocumentLink instead of Attachment */
    }
    
    //wrapper class for templates
    public class TemplateWrapper{
        public Apttus__APTS_Template__c template{get;set;}
        public ID AgreementID{get;set;}
        public Integer Sequence {get;set;}
        public String outputFormat {get;set;}
        public String pLevel {get;set;}
        
        public boolean selected{get;set;}
        
        public TemplateWrapper(Apttus__APTS_Template__c template, ID AgreementID, Integer Sequence, String outputFormat, String pLevel) {
            this.template = template;
            this.AgreementID = AgreementID;
            this.Sequence = Sequence;
            this.outputFormat = outputFormat;
            this.pLevel = pLevel;
        }
    }
}