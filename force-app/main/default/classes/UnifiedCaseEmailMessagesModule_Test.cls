/**
 * @description Test Class covering UnifiedCaseEmailMessagesModule
 * @author Ranjeewa Silva
 * @date 2024-08-12
 * @changelog
 */
@IsTest
private class UnifiedCaseEmailMessagesModule_Test {

	/**
	 * Test to ensure auto generated customer emails (e.g. OOO response) to case records does not trigger reassignment
	 * of cases.
	 */
	@IsTest
	static void testAutoGeneratedEmailsDoesNotTriggerCaseReassignment() {
		// =====================================
		// Data Preparation
		// =====================================
		Case caseRecord = ApplicationTestDataFactoryCase.getCases(1, true)[0];
		EmailMessage emailMessage = ApplicationTestDataFactoryCase.getEmailMessages(1, true, true, 'test001@somecompany.com.invalid', 'test002@somecompany.com.invalid', 'test', caseRecord.Id)[0];
		// set up Auto-Submitted header with the value we are monitoring for.
		emailMessage.Headers = 'auto-submitted : auto-generated';

		// =====================================
		// Stubbing
		// =====================================
		ApplicationUnitOfWork mockUow = MockUtility.mockUnitOfWork();
		CaseUnifiedAutomationService mockCaseAutomationService = (CaseUnifiedAutomationService)MockUtility.mockUtility(CaseUnifiedAutomationService.class);
		CasesSelector mockCasesSelector = (CasesSelector)MockUtility.mockSelector(CasesSelector.class);

		// =====================================
		// Testing
		// =====================================
		Test.startTest();

		new UnifiedCaseEmailMessagesModule().onAfterInsert(new List<EmailMessage>{emailMessage}, mockUow);

		Test.stopTest();

		// verify cases are not queried
		((CasesSelector)MockUtility.Mocks.verify(mockCasesSelector, 0)).search((Map<String, Object>)fflib_Match.anyObject(), (Set<Object>)fflib_Match.anyObject(), (Boolean)fflib_Match.anyBoolean());

		// verify case automation service is not called.
		((CaseUnifiedAutomationService)MockUtility.Mocks.verify(mockCaseAutomationService, 0)).processForCaseReassignment((List<CaseUnifiedAutomationService.RecordWrapper>)fflib_Match.anyObject(), (CaseUnifiedAutomationService.InvocationPoint)fflib_Match.anyObject(), (ApplicationUnitOfWork)fflib_Match.anyObject());
	}

	/**
	 * Test to ensure customer emails to non unified cases does not trigger reassignment.
	 */
	@IsTest
	static void testEmailsToOtherCaseRecordTypesDoNotTriggerCaseReassignment() {
		// =====================================
		// Data Preparation
		// =====================================
		Case caseRecord = ApplicationTestDataFactoryCase.getCases(1, true)[0];
		caseRecord.RecordTypeId = ApplicationTestDataFactoryCase.caseSSSWDeliveryRecordType;
		EmailMessage emailMessage = ApplicationTestDataFactoryCase.getEmailMessages(1, true, true, 'test001@somecompany.com.invalid', 'test002@somecompany.com.invalid', 'test', caseRecord.Id)[0];

		// =====================================
		// Stubbing
		// =====================================
		ApplicationUnitOfWork mockUow = MockUtility.mockUnitOfWork();
		CaseUnifiedAutomationService mockCaseAutomationService = (CaseUnifiedAutomationService)MockUtility.mockUtility(CaseUnifiedAutomationService.class);
		CasesSelector mockCasesSelector = (CasesSelector)MockUtility.mockSelector(CasesSelector.class);

		// set up our responses
		MockUtility.Mocks.startStubbing();
		MockUtility.Mocks.when(mockCasesSelector.search((Map<String, Object>)fflib_Match.anyObject(), (Set<Object>)fflib_Match.anyObject(), fflib_Match.anyBoolean())).thenReturn(new List<Case>());
		MockUtility.Mocks.stopStubbing();

		// =====================================
		// Testing
		// =====================================
		Test.startTest();

		new UnifiedCaseEmailMessagesModule().onAfterInsert(new List<EmailMessage>{emailMessage}, mockUow);

		Test.stopTest();

		// make search method was called to select unified cases
		fflib_ArgumentCaptor searchParamsCaptor = fflib_ArgumentCaptor.forClass(Map<String, Object>.class);
		((CasesSelector)MockUtility.Mocks.verify(mockCasesSelector, 1)).search((Map<String, Object>)searchParamsCaptor.capture(), (Set<Object>)fflib_Match.anyObject(), fflib_Match.anyBoolean());
		Map<String, Object> searchParams = (Map<String, Object>)searchParamsCaptor.getValue();
		Assert.areEqual(new Set<Id>{caseRecord.Id}, searchParams.get('caseIds'));
		Assert.isInstanceOfType(searchParams.get('recordTypeIds'), Set<Id>.class);
		Assert.isFalse(((Set<Id>)searchParams.get('recordTypeIds')).isEmpty(), 'Expected unified case record type ids parameter to be non empty, but is empty.');
		Assert.isTrue(((Set<Id>)searchParams.get('recordTypeIds')).contains(ApplicationTestDataFactoryCase.caseUnifiedInvestigationRecordType));

		// verify case automation service is not called.
		((CaseUnifiedAutomationService)MockUtility.Mocks.verify(mockCaseAutomationService, 0)).processForCaseReassignment((List<CaseUnifiedAutomationService.RecordWrapper>)fflib_Match.anyObject(), (CaseUnifiedAutomationService.InvocationPoint)fflib_Match.anyObject(), (ApplicationUnitOfWork)fflib_Match.anyObject());
	}

	/**
	 * Test to ensure customer emails to unified cases invokes service class to reassign eligible cases.
	 */
	@IsTest
	static void testEmailsToUnifiedCasesTriggerCaseReassignment() {
		// =====================================
		// Data Preparation
		// =====================================
		Case caseRecord = ApplicationTestDataFactoryCase.getCases(1, true)[0];
		caseRecord.RecordTypeId = ApplicationTestDataFactoryCase.caseUnifiedInvestigationRecordType;
		EmailMessage emailMessage = ApplicationTestDataFactoryCase.getEmailMessages(1, true, true, 'test001@somecompany.com.invalid', 'test002@somecompany.com.invalid', 'test', caseRecord.Id)[0];

		// =====================================
		// Stubbing
		// =====================================
		ApplicationUnitOfWork mockUow = MockUtility.mockUnitOfWork();
		CaseUnifiedAutomationService mockCaseAutomationService = (CaseUnifiedAutomationService)MockUtility.mockUtility(CaseUnifiedAutomationService.class);
		CasesSelector mockCasesSelector = (CasesSelector)MockUtility.mockSelector(CasesSelector.class);

		// set up our responses
		MockUtility.Mocks.startStubbing();
		MockUtility.Mocks.when(mockCasesSelector.search((Map<String, Object>)fflib_Match.anyObject(), (Set<Object>)fflib_Match.anyObject(), fflib_Match.anyBoolean())).thenReturn(new List<Case>{caseRecord});
		MockUtility.Mocks.stopStubbing();

		// =====================================
		// Testing
		// =====================================
		Test.startTest();

		new UnifiedCaseEmailMessagesModule().onAfterInsert(new List<EmailMessage>{emailMessage}, mockUow);

		Test.stopTest();

		// make search method was called to select unified cases
		fflib_ArgumentCaptor searchParamsCaptor = fflib_ArgumentCaptor.forClass(Map<String, Object>.class);
		((CasesSelector)MockUtility.Mocks.verify(mockCasesSelector, 1)).search((Map<String, Object>)searchParamsCaptor.capture(), (Set<Object>)fflib_Match.anyObject(), fflib_Match.anyBoolean());
		Map<String, Object> searchParams = (Map<String, Object>)searchParamsCaptor.getValue();
		Assert.areEqual(new Set<Id>{caseRecord.Id}, searchParams.get('caseIds'));
		Assert.isInstanceOfType(searchParams.get('recordTypeIds'), Set<Id>.class);
		Assert.isFalse(((Set<Id>)searchParams.get('recordTypeIds')).isEmpty(), 'Expected unified case record type ids parameter to be non empty, but is empty.');
		Assert.isTrue(((Set<Id>)searchParams.get('recordTypeIds')).contains(ApplicationTestDataFactoryCase.caseUnifiedInvestigationRecordType));

		// verify case automation service is called.
		fflib_ArgumentCaptor caseReassignParamsCaptor = fflib_ArgumentCaptor.forClass(List<CaseUnifiedAutomationService.RecordWrapper>.class);
		((CaseUnifiedAutomationService)MockUtility.Mocks.verify(mockCaseAutomationService, 1)).processForCaseReassignment((List<CaseUnifiedAutomationService.RecordWrapper>)caseReassignParamsCaptor.capture(), (CaseUnifiedAutomationService.InvocationPoint)fflib_Match.anyObject(), (ApplicationUnitOfWork)fflib_Match.anyObject());
		List<CaseUnifiedAutomationService.RecordWrapper> caseReassignParams = (List<CaseUnifiedAutomationService.RecordWrapper>)caseReassignParamsCaptor.getValue();
		Assert.areEqual(1, caseReassignParams.size(), 'Expected only the case record that received the email to be passed to service.');
		Assert.areEqual(caseRecord.Id, caseReassignParams[0].caseRecord.Id, 'Unified case record that received the email must be passed to the service, but got something else.');
	}
}